#!/usr/bin/python

#
# Written by Scott Ware
#
# Version 0.0.8
#

import dbus
import os
import io
import sys
import signal
import atexit
import time
import json
import subprocess
import string
import codecs

VERSION = "0.0.8"
SERVICE_HISTORY_PATH = "/etc/wifi-manager/services.json"
PID_PATH = "/etc/wifi-manager/wm.pid"

TIMEOUT = 60000

sys.stdout = codecs.getwriter('utf-8')(sys.stdout)

def on_exit():
	# Ensure agent gets killed
        if agent is not None:
		agent.kill()

	# Cancel service connection
	if current_service is not None:
		current_service.Disconnect()

	# Remove PID file
	if os.path.exists(PID_PATH):
		os.remove(PID_PATH)

def get_hostname():
    	name_file = open('/etc/hostname', 'r')
    	hostname = name_file.readline().strip()
    	name_file.close()
	hostname.replace(" ", "_")
    	return hostname

def get_platform():
    	platform_file = open('/sys/class/dmi/id/board_name', 'r')
    	platform = platform_file.readline()
    	platform_file.close()
	
	if platform in ['BODEGA BAY\n', 'SALT BAY\n']:
    		return "edison"

    	return None

def check_wifi():
	for path,properties in manager.GetTechnologies():
		if properties["Type"] == "wifi":
			technology = dbus.Interface(bus.get_object("net.connman", path), "net.connman.Technology")

			# Enable WiFi
			if properties["Powered"] == dbus.Boolean(0):
				technology.SetProperty("Powered", dbus.Boolean(1))
				time.sleep(2)
			
			return True
	return False

def cycle_wifi():
	for path,properties in manager.GetTechnologies():
		if properties["Type"] == "wifi":
			technology = dbus.Interface(bus.get_object("net.connman", path), "net.connman.Technology")

			# Cycle WiFi
			if properties["Powered"] == dbus.Boolean(1):
				technology.SetProperty("Powered", dbus.Boolean(0))
				time.sleep(2)
				technology.SetProperty("Powered", dbus.Boolean(1))
				time.sleep(2)
			
			return True
	return False

# Parses services for potential auto-connect candidates
def get_auto_connect_services(services):

	# Extract services which can be automatically connected or support WPS
	parsedServices = []
	
	for service in services:
		if service[1]["Type"] == "wifi":
			parsedServices.append(service)

	for path,properties in parsedServices:
		properties["Strength"] = int(properties["Strength"])

	return parsedServices

# Parses services to ensure they are suitable for JSON encoding
def parse_services(services):

	# Extract WiFi Services	
	parsedServices = []
	
	for service in services:
		if service[1]["AutoConnect"] == dbus.Boolean(1):
			parsedServices.append(service)
		
		if "wps" in service[1]["Security"]:
			parsedServices.append(service)

	return parsedServices

def scan_services():
	for path,properties in manager.GetTechnologies():
		if properties["Type"] == "wifi":
			technology = dbus.Interface(bus.get_object("net.connman", path), "net.connman.Technology")

			try:
				# Scan for services
				technology.Scan(timeout=20)

				# Retrieve services
				services = manager.GetServices(timeout=20)
				services = parse_services(services)

				# Save to history
				with open(SERVICE_HISTORY_PATH, 'w') as f:
  					json.dump(services, f, skipkeys=True)
					f.close()

				return services

			except dbus.DBusException, error:
				if error.get_dbus_name() in ['org.freedesktop.DBus.Error.NoReply']:
					print "Error: Unable to scan for services at this time. Please try again later."
					return []

def get_services():
	# Get services from history if tethering is enabled
	if is_tethering_enabled():
		if os.path.isfile(SERVICE_HISTORY_PATH):
			with open(SERVICE_HISTORY_PATH) as f:
				services = json.load(f)
				f.close() 
    				return services
	
	# Scan WiFi services and return as normal	
	else:
		return scan_services()


def check_service(service):
	# Check service exists
	services = get_services()
	for path,properties in services:
		if service in path:
			return True

	return False

def attempt_connect_services(services):
	os.system('clear')
		
	# Attempt service connection
	for service in services:
		print "Attempting to connect to " + service[1]["Name"] + "..."

		if connect_service(service[0], True):
			print "\n Connected"
			return True

	return False

def connect_service(path, quiet):
	try:
		current_service = dbus.Interface(bus.get_object("net.connman", path),
						"net.connman.Service")
		time.sleep(2)

		# Attempt to connect service
		if not quiet:
			os.system('clear')
			print "Attempting connection to service..."

		current_service.Connect(timeout=TIMEOUT)

		if not quiet:
			print "\n Connected"

		return True
	except dbus.DBusException, error:
		if error.get_dbus_name() in ['net.connman.Error.AlreadyConnected']:
			if not quiet:
				print "This service is already connected!"
		elif error.get_dbus_name() in ['net.connman.Error.InProgress']:
			if not quiet:			
				print "This service is in the process of connecting. Please try again later if not connected shortly."
		elif error.get_dbus_name() in ['net.connman.Error.OperationAborted']:
			if not quiet:
				print "Unable to connect at this time. Please try again later."
		elif error.get_dbus_name() in ['net.connman.Error.InvalidArguments']:
			if not quiet:
				print "Unable to connect to the service with the details provided. Please try again."
		else:
			if not quiet:
				print "%s: %s" % (error._dbus_error_name, error.message)

		current_service = None
		return False

def print_services(services):
	os.system('clear')
	print "\nWiFi Services\n=============\n"
	for path, properties in services:
		identifier = path[path.rfind("/") + 1:]
		state = " "
		autoconnect = "  "

		if properties["Favorite"] == dbus.Boolean(1):
			favorite = "*"

			if properties["AutoConnect"] == dbus.Boolean(1):
				autoconnect = " A"
			else:
				autoconnect = "  "
		else:
			favorite = " "

		if "Name" in properties.keys():
			name = properties["Name"]
		else:
			name = "{" + properties["Type"] + "}"

		print "%s%s %-26s %s" % (favorite, autoconnect, name, identifier)

def is_tethering_enabled():
	for path,properties in manager.GetTechnologies():
		if properties["Type"] == "wifi":
			if properties["Tethering"] == dbus.Boolean(1):
				return True
	return False

def toggle_tethering():
    	if is_tethering_enabled():
		disable_tethering()
    	else:
		enable_tethering()

def enable_tethering():
    	# Check tethering is not already enabled
	if is_tethering_enabled():
		print "Tethering is already enabled!"
		return

	# Save WiFi services to history
	scan_services()

	print "\n Enabling WiFi tethering...\n"

	# Edison
	if get_platform() is "edison":
		if not reload_edison_wifi_interface(True):
			return False

	technologies = manager.GetTechnologies()
	for (path, properties) in technologies:
		if properties["Type"] == "wifi":
			technology = dbus.Interface(bus.get_object("net.connman", path),
								"net.connman.Technology")

			# Check SSID is set
			if not "TetheringIdentifier" in properties:
		    		ssid = get_hostname()
	            		technology.SetProperty("TetheringIdentifier", ssid[:32])

			# Check password is set
			if not "TetheringPassphrase" in properties:
		    		technology.SetProperty("TetheringPassphrase", "password")

			# Enable tethering
			try:
				technology.SetProperty("Tethering", dbus.Boolean(1))
			except dbus.DBusException, error:
				if error.get_dbus_name() in ['net.connman.Error.NotSupported']:
					print "Error: Unable to start WiFi tethering at this time. Please try again later."
					# Reload WiFi interface in normal mode on Edison
					if get_platform() is "edison":
						reload_edison_wifi_interface(False)
	
					return False

			time.sleep(2)

			# Check the 'tether' interface has initialised
			if not os.path.exists("/sys/class/net/tether"):
				print "Error: WiFi tethering failed to start. Please try again later."
				return False

			# Edison Fix
			if get_platform() is "edison":

				# FIXME: ConnMan will try to add wlan0 to tether bridge but in Edison
				# that currently fails with EBUSY.
				result = subprocess.call("brctl addif tether wlan0", shell=True)
				if(result != 0):
					print "Error: Unable to bridge wireless interface."
					reload_edison_wifi_interface(False)
					return False

		    	print "Success"
			return True

	return False

def disable_tethering():

	technologies = manager.GetTechnologies()

	for (path, properties) in technologies:
	    	if properties["Type"] == "wifi":
			technology = dbus.Interface(bus.get_object("net.connman", path),
							"net.connman.Technology")

			# Disable tethering
			if properties["Tethering"] == dbus.Boolean(1):
		    		print "\n Disabling WiFi tethering...\n"
		    		technology.SetProperty("Tethering", dbus.Boolean(0))
			
				# Edison Fix
				if get_platform() is "edison":
					if not reload_edison_wifi_interface(False):
						return False
			else:
		    		print "Tethering already disabled!"
				return False
		    		
			print "Success"
			return True

	return False

def reload_edison_wifi_interface(tethering):

	# Reload WiFi driver in normal mode
	result = subprocess.call("modprobe -r bcm4334x", shell=True)
	if(result != 0):
		print "Error: Unable to remove WiFi module."
		return False

	time.sleep(2)

	if(tethering):
		result = subprocess.call("modprobe bcm4334x op_mode=2", shell=True)
		if(result != 0):
			print "Error: Unable to load WiFi module in AP mode."
			return False
	else:
		result = subprocess.call("modprobe bcm4334x", shell=True)
		if(result != 0):
			print "Error: Unable to load WiFi module."
			return False

	time.sleep(2)

	# Cycle WiFi Interface
	cycle_wifi()

	return True

def print_usage():
	print "\nUsage:\n"
	print "wifi-manager services: List available WiFi services."
	print "\nwifi-manager connect [SERVICE_NAME]: Initialise connection to WiFi service."
	print "\nFor EAP/WPA:"
	print "wifi-manager connect [SERVICE_NAME] [Passphrase=<passphrase>]"
	print "\nFor WISPr login, L2TP or PPTP:"
	print "wifi-manager connect [SERVICE_NAME] [Username=<username>] [Password=<password>]"
	print "\nwifi-manager tether [enable|disable|toggle]: Enable, disable or toggle WiFi tethering (AP Mode)."
	print "\nwifi-manager help: Prints this usage guide.\n"
	print "\nwifi-manager version: Display version.\n"
	sys.exit()

if __name__ == '__main__':

	if (len(sys.argv) < 2):
		print "Please specify a command to perform!"
		print_usage()

	if sys.argv[1] == "help":
		print_usage()

	if sys.argv[1] == "version":
		print "\nVersion: " + VERSION + "\n"
		sys.exit()

	try:
		# Setup Variables
		agent = None
		current_service = None
		DEVNULL = open(os.devnull, 'wb')

		# Setup Connman DBus connection
		bus = dbus.SystemBus()
		manager = dbus.Interface(bus.get_object('net.connman', "/"),
					'net.connman.Manager')
		
		# Check WiFi
		if not check_wifi():
			print "Error: WiFi not found on this device!"
			sys.exit()

		# Register cleanup handlers
		atexit.register(on_exit)

		# Create PID file
		with open(PID_PATH, 'w') as f:
  			f.write(str(os.getpid()))
			f.close()


		#
		# Auto Connect
		#

		if sys.argv[1] == "auto-connect":

			# Make sure tethering is disabled
			if is_tethering_enabled():
				if not disable_tethering():
					sys.exit()

			# Get list of suitable WiFi services
			services = scan_services()
			services = get_auto_connect_services(services)

			if not services:
				print "Unable to detect any suitable auto-connect access points at this time!"
				sys.exit()

			# Register and populate agent
			agent_args = "wm-agent WPS="
			agent = subprocess.Popen(agent_args, stderr=DEVNULL, shell=True)

			# Attempt to connect to services
			TIMEOUT = 30
			if not attempt_connect_services(services):
				print "\nUnable to auto connect to access point at this time!"

		#
		# Connect
		#

		elif sys.argv[1] == "connect":
			# Check service argument
			if (len(sys.argv) < 3):
				print "Error: No service specified!"
				print_usage()

			# Make sure tethering is disabled
			if is_tethering_enabled():
				if not disable_tethering():
					sys.exit()

			# Check WiFi service exists
			if not check_service(sys.argv[2]):
				print "Error: Service doesn't exist!"
				sys.exit()

			# Register and populate agent
			agent_args = "wm-agent"

			if len(sys.argv) > 3:
				for arg in sys.argv[3:]:
					agent_args += " " + arg
			
			agent = subprocess.Popen(agent_args, stderr=DEVNULL, shell=True)
		
			# Start service connection
			connect_service("/net/connman/service/" + sys.argv[2], False)

		#
		# Services
		#

		elif sys.argv[1] == "services":

			# Scan for WiFi services and print them on the console
			print_services(get_services())

		#
		# Tethering
		#
		
		elif sys.argv[1] == "tether":

			# Check arguments
			if (len(sys.argv) < 3):
				print "Error: No command specified!"
				print_usage()

			# Parse arguments
			if sys.argv[2] == "enable":
				enable_tethering()
			elif sys.argv[2] == "disable":
				disable_tethering()
			elif sys.argv[2] == "toggle":
				toggle_tethering()
			else:
				print "Error: Command not recognised!"
				print_usage()

		else:
			print "Error: Command not recognised!"
			print_usage()

	except dbus.DBusException, error:
		if error.get_dbus_name() in ['net.connman.Error.ServiceUnknown']:
			print "Error: Connman service is not currently running. Please enable Connman before using WiFi Manager!"
		else:
			print "%s: %s" % (error._dbus_error_name, error.message)
		sys.exit()

	except KeyboardInterrupt:
		sys.exit()

