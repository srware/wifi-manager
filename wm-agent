#!/usr/bin/python

#
# Written by Scott Ware
#

import gobject
import dbus
import dbus.service
import dbus.mainloop.glib
import sys
import string
import random
import time

class Canceled(dbus.DBusException):
	_dbus_error_name = "net.connman.Error.Canceled"

class LaunchBrowser(dbus.DBusException):
	_dbus_error_name = "net.connman.Agent.Error.LaunchBrowser"

class Agent(dbus.service.Object):
	name = None
	identity = None
	passphrase = None
	wpspin = None
	username = None
	password = None

	@dbus.service.method("net.connman.Agent",
					in_signature='', out_signature='')
	def Release(self):
		print("Agent Released!")
		mainloop.quit()

	def get_identity(self):
		response = {}

		if self.identity is None:
			while 1:
				identity = raw_input("Please enter identity: ")

				if (len(identity) > 0):
					response["Identity"] = identity
					break
				else:
					print "\n** Nothing entered. Please try again. **"
		else:
			response["Identity"] = self.identity
			time.sleep(4)

		return response

	def get_passphrase(self):
		response = {}

		if self.passphrase is None and self.wpspin is None:
			while 1:
				passphrase = raw_input("Please enter passphrase: ")

				if (len(passphrase) < 8):
					print "\n** Passphrase must be 8 or more characters long. Please try again. **"
				else:
					response["Passphrase"] = passphrase
					break
		else:
			if self.passphrase is not None:
				response["Passphrase"] = self.passphrase
			if self.wpspin is not None:
				response["WPS"] = self.wpspin
			time.sleep(4)

		return response

	def get_username(self):
		response = {}

		if self.username is None:
			while 1:
				username = raw_input("Please enter username: ")

				if (len(username) > 0):
					response["Username"] = username
					break
				else:
					print "\n** Nothing entered. Please try again. **"
		else:
			response["Username"] = self.username
			time.sleep(4)

		return response

	def get_password(self):
		response = {}

		if self.password is None:
			while 1:
				password = raw_input("Please enter password: ")

				if (len(password) > 0):
					response["Password"] = password
					break
				else:
					print "\n** Nothing entered. Please try again. **"
		else:
			response["Password"] = self.password
			time.sleep(4)

		return response

	def get_name(self):
		response = {}

		if self.name is None:
			while 1:
				name = raw_input("Please enter service name: ")

				if (len(name) > 0):
					response["Name"] = name
					break
				else:
					print "\n** Nothing entered. Please try again. **"
		else:
			response["Name"] = self.name
			time.sleep(4)

		return response

	@dbus.service.method("net.connman.Agent",
					in_signature='oa{sv}',
					out_signature='a{sv}')
	def RequestInput(self, path, fields):
		# print "RequestInput (%s,%s)" % (path, fields)

		response = {}

		if fields.has_key("Name"):
			response.update(self.get_name())
		if fields.has_key("Identity"):
			response.update(self.get_identity())
		if fields.has_key("Passphrase"):
			response.update(self.get_passphrase())
		if fields.has_key("Username"):
			response.update(self.get_username())
		if fields.has_key("Password"):
			response.update(self.get_password())

		if response.has_key("Error"):
			if response["Error"] == "cancel":
				raise Canceled("canceled")
				return
			if response["Error"] == "browser":
				raise LaunchBrowser("launch browser")
				return

		# print "returning (%s)" % (response)
		return dbus.Dictionary(response)

	@dbus.service.method("net.connman.Agent",
					in_signature='os',
					out_signature='')
	def ReportError(self, path, error):
		print "ReportError %s, %s" % (path, error)
		retry = raw_input("Retry service (yes/no): ")
		if (retry == "yes"):
			class Retry(dbus.DBusException):
				_dbus_error_name = "net.connman.Agent.Error.Retry"

			raise Retry("retry service")
		else:
			mainloop.quit()
			return


	@dbus.service.method("net.connman.Agent",
					in_signature='', out_signature='')
	def Cancel(self):
		print "Cancel"

def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
	return ''.join(random.choice(chars) for _ in range(size))

if __name__ == '__main__':

	try:
		# Setup Connman DBus connection
		dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
		bus = dbus.SystemBus()
		manager = dbus.Interface(bus.get_object('net.connman', "/"),
					'net.connman.Manager')

		# Register and populate agent
		agent_id = "/wifi_manager/agent" + id_generator()
		object = Agent(bus, agent_id)

		if len(sys.argv) > 1:
			for arg in sys.argv[1:]:
				if arg.startswith("Name="):
					object.name = arg.replace("Name=", "", 1)
				elif arg.startswith("Identity="):
					object.identity = arg.replace("Identity=", "", 1)
				elif arg.startswith("Passphrase="):
					object.passphrase = arg.replace("Passphrase=", "", 1)
				elif arg.startswith("WPS="):
					object.wpspin = arg.replace("WPS=", "", 1)
				elif arg.startswith("Username="):
					object.username = arg.replace("Username=", "", 1)
				elif arg.startswith("Password="):
					object.password = arg.replace("Password=", "", 1)

		manager.RegisterAgent(agent_id)

		# Start agent
		mainloop = gobject.MainLoop()
		mainloop.run()

	except dbus.DBusException, error:
		if error.get_dbus_name() in ['net.connman.Error.ServiceUnknown']:
			print "Error: Connman service is not currently running. Please enable Connman before using WiFi Agent!"
		else:
			print "%s: %s" % (error._dbus_error_name, error.message)
		sys.exit()
